// Code generated by Kitex v0.9.1. DO NOT EDIT.

package codeservice

import (
	"context"
	"errors"
	code "github.com/LXJ0000/gomall/app/code/kitex_gen/code"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Send": kitex.NewMethodInfo(
		sendHandler,
		newSendArgs,
		newSendResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Verify": kitex.NewMethodInfo(
		verifyHandler,
		newVerifyArgs,
		newVerifyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	codeServiceServiceInfo                = NewServiceInfo()
	codeServiceServiceInfoForClient       = NewServiceInfoForClient()
	codeServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return codeServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return codeServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return codeServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CodeService"
	handlerType := (*code.CodeService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "code",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func sendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(code.SendReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(code.CodeService).Send(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendArgs:
		success, err := handler.(code.CodeService).Send(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendArgs() interface{} {
	return &SendArgs{}
}

func newSendResult() interface{} {
	return &SendResult{}
}

type SendArgs struct {
	Req *code.SendReq
}

func (p *SendArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(code.SendReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendArgs) Unmarshal(in []byte) error {
	msg := new(code.SendReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendArgs_Req_DEFAULT *code.SendReq

func (p *SendArgs) GetReq() *code.SendReq {
	if !p.IsSetReq() {
		return SendArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendResult struct {
	Success *code.SendResp
}

var SendResult_Success_DEFAULT *code.SendResp

func (p *SendResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(code.SendResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendResult) Unmarshal(in []byte) error {
	msg := new(code.SendResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendResult) GetSuccess() *code.SendResp {
	if !p.IsSetSuccess() {
		return SendResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendResult) SetSuccess(x interface{}) {
	p.Success = x.(*code.SendResp)
}

func (p *SendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendResult) GetResult() interface{} {
	return p.Success
}

func verifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(code.VerifyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(code.CodeService).Verify(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *VerifyArgs:
		success, err := handler.(code.CodeService).Verify(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*VerifyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newVerifyArgs() interface{} {
	return &VerifyArgs{}
}

func newVerifyResult() interface{} {
	return &VerifyResult{}
}

type VerifyArgs struct {
	Req *code.VerifyReq
}

func (p *VerifyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(code.VerifyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *VerifyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *VerifyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *VerifyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *VerifyArgs) Unmarshal(in []byte) error {
	msg := new(code.VerifyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var VerifyArgs_Req_DEFAULT *code.VerifyReq

func (p *VerifyArgs) GetReq() *code.VerifyReq {
	if !p.IsSetReq() {
		return VerifyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *VerifyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VerifyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type VerifyResult struct {
	Success *code.VerifyResp
}

var VerifyResult_Success_DEFAULT *code.VerifyResp

func (p *VerifyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(code.VerifyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *VerifyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *VerifyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *VerifyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *VerifyResult) Unmarshal(in []byte) error {
	msg := new(code.VerifyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *VerifyResult) GetSuccess() *code.VerifyResp {
	if !p.IsSetSuccess() {
		return VerifyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *VerifyResult) SetSuccess(x interface{}) {
	p.Success = x.(*code.VerifyResp)
}

func (p *VerifyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VerifyResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Send(ctx context.Context, Req *code.SendReq) (r *code.SendResp, err error) {
	var _args SendArgs
	_args.Req = Req
	var _result SendResult
	if err = p.c.Call(ctx, "Send", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Verify(ctx context.Context, Req *code.VerifyReq) (r *code.VerifyResp, err error) {
	var _args VerifyArgs
	_args.Req = Req
	var _result VerifyResult
	if err = p.c.Call(ctx, "Verify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
